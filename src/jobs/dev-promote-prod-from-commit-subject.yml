description: >
  Promote a dev version of an orb to a semantic production release.
  It assumes the context of a GitHub pull request, and promotion of
  the orb to a new major/minor/patch version is
  based on information that must be contained in the subject of
  the commit that merges the pull request.
  Namely, the commit subject must include the `[semver:FOO]` pattern,
  where FOO is major, minor, patch, or skip (to skip promotion).
  e.g. 'Merge pull request #XX from some-branch [semver:minor]'

  This job is designed to run at the conclusion of an
  integration-testing workflow.

executor: cli/default

parameters:
  publish-token-variable:
    type: env_var_name
    default: CIRCLE_TOKEN
    description: >
      Name of environment variable containing your CircleCI API token

  orb-name:
    type: string
    description: >
      Semver-less name of an orb, e.g. circleci/orb-tools

  orb-ref:
    type: string
    default: dev:${CIRCLE_SHA1:0:7}
    description: >
      Dev:reference to promote to a production release, defaults to
      'dev:${CIRCLE_SHA1:0:7}' (evaluates to the first 7
      characters of the job's commit hash)

  add-pr-comment:
    type: boolean
    description: >
      CircleCI can comment on the merged PR with the final production version.
      If you want contributors to see a message with the production version,
      please provide the username & token, and ensure the merge commit subject
      includes the PR number in default format.
      i.e. 'Merge pull request #XX from some-branch'

  pr-number-sed-expression:
    description: >
      Used to extract the PR number from the commit subject with sed.
      The default value works with the default
      GitHub PR merge commit subject.
      Only applicable when add-pr-comment is set to true.
    type: string
    default: 's/Merge pull request #\([0-9]*\) from.*/\1/p'

  bot-user:
    type: string
    description: >
      The GitHub user to post PR comment.
      Only applicable when add-pr-comment is set to true.
    default: ""

  bot-token-variable:
    description: >
      Name of env var containing the GitHub token value of the GitHub user that
      to be used for posting the PR comment. Pass this as a raw string such
      as GITHUB_TOKEN. Do not paste the actual token into your
      configuration.
      Only applicable when add-pr-comment is set to true.
    type: env_var_name
    default: PR_COMMENTER_GITHUB_TOKEN

  publish-version-tag:
    type: boolean
    description: >
      Push a git tag describing the release that was just published? If `true`,
      make sure to pass SSH fingerprints, as well

  ssh-fingerprints:
    type: string
    default: ""
    description: >
      Fingerprints for SSH deploy key (add the public key as a read/write
      key on GitHub; add the private key in CircleCI via SSH Permissions,
      with github.com as Hostname). Used to push a git tag back to the
      project's repository.

  checkout:
    description: >
      Whether to perform the CircleCI checkout step.
    type: boolean
    default: true

  fail-if-semver-not-indicated:
    description: >
      Whether to fail if the commit subject did not include [semver:patch|minor|release|skip]
    type: boolean

steps:

  - dev-promote-from-commit-subject:
      orb-name: <<parameters.orb-name>>
      orb-ref: <<parameters.orb-ref>>
      token-variable: <<parameters.publish-token-variable>>
      add-pr-comment: <<parameters.add-pr-comment>>
      pr-number-sed-expression: <<parameters.pr-number-sed-expression>>
      bot-user: <<parameters.bot-user>>
      bot-token-variable: <<parameters.bot-token-variable>>
      checkout: <<parameters.checkout>>
      fail-if-semver-not-indicated: <<parameters.fail-if-semver-not-indicated>>

  - when:
      condition: <<parameters.publish-version-tag>>
      steps:
        - run:
            name: Check if release tags should be published
            command: <<include(scripts/should-release-tag.sh)>>

        - add_ssh_keys:
            fingerprints:
              - <<parameters.ssh-fingerprints>>

        - configure-git

        - run:
            name: construct/push git release tag
            environment:
              ORB_NAME: <<parameters.orb-name>>
            command: <<include(scripts/construct-push-tag.sh)>>
