version: 2.1

orbs:
  cli: circleci/circleci-cli@volatile

commands:
  pack:
    description: >
      *Experimental*
      Uses the CLI to pack an orb file structure
      into a single orb yml.
    parameters:
      source:
        description: "Path to the root folder of an unpacked orb."
        type: string
      destination:
        description: "Path including the filename to output the packed orb."
        type: string
    steps:
      - run:
          name: "Ensure destination path"
          command: |
            mkdir -pv $(dirname << parameters.destination >>)
      - run:
          name: "Pack << parameters.source>> to << parameters.destination >>"
          command: |
            circleci config pack << parameters.source >> > << parameters.destination >>

  validate:
    description: >
      Users the CLI to validate a given orb yml
    parameters:
      orb-path:
        description: "Path to the orb file to be validated."
        type: string
    steps:
      - run:
          name: "Validate whether this is a well-formed orb."
          command: circleci orb validate << parameters.orb-path >>

  increment:
    description: >
      Uses the CLI to increment the version of an orb in the registry.
      If the orb does not have a version yet it starts at 0.0.0
    parameters:
      orb-path:
        description: "Path to an orb file."
        type: string
      orb-ref:
        description: "A versionless orb-ref in the form <namespace>/<orb-name>"
        type: string
      segment:
        description: "The semver segment to increment 'major' or 'minor' or 'patch'"
        type: enum
        enum: ["major", "minor", "patch"]
      token-variable:
        description: >
          The env var containing your token. Pass this as a literal string such
          as `$ORB_PUBLISHING_TOKEN`. Do not paste the actual token into your
          configuration. If omitted it's assumed the CLI has already been setup
          with a valid token.
        type: string
        default: ""
    steps:
      - run:
          name: >
            Increment << parameters.segment >> segment of orb at << parameters.orb-path >>
            NOTE: this currently assumes you are publishing to the registry at circleci.com
          command: >
            circleci orb publish increment
            << parameters.orb-path >>
            << parameters.orb-ref >>
            << parameters.segment >>
            <<# parameters.token-variable >>--token << parameters.token-variable >> <</ parameters.token-variable >>
  publish:
    description: >
      Uses the CLI to publish an orb to the registry.
    parameters:
      orb-path:
        description: "Path to an orb file."
        type: string
      orb-ref:
        description: >
          A fully-qualified reference to an orb. This takes the form <namespace>/<orb-name>@<version>
          NOTE: To publish a dev version prefix the version with 'dev:' like this: <namespace>/<orb-name>@dev:<label>
        type: string
      token-variable:
        description: >
          The env var containing your token. Pass this as a literal string such
          as `$ORB_PUBLISHING_TOKEN`. Do not paste the actual token into your
          configuration. If omitted it's assumed the CLI has already been setup
          with a valid token.
        type: string
        default: ""
    steps:
      - run:
          name: >
            Publish orb at << parameters.orb-path >> to << parameters.orb-ref >>
            NOTE: this currently assumes you are publishing to the registry at circleci.com
          command: >
            circleci orb publish << parameters.orb-path >> << parameters.orb-ref >>
            <<# parameters.token-variable >>--token << parameters.token-variable >> <</ parameters.token-variable >>

jobs:
  pack:
    description: >
      *Experimental*
      Pack the contents of an orb for publishing.
    parameters:
      source-dir:
        description: >
          Path to the root of the orb source directory to be packed. (ie: my-orb/src/)
        type: string
      destination-orb-path:
        description: >
          Path including filename of where the packed orb will be written.
        type: string
      validate:
        description: >
          Boolean for whether or not to do validation on the orb. Default
          is true.
        type: boolean
        default: true
      checkout:
        description: >
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
        default: true
      attach-workspace:
        description: >
          Boolean for whether or not to attach to an existing workspace. Default
          is false.
        type: boolean
        default: false
      workspace-root:
        description: >
          Workspace root path that is either an absolute path or a path relative
          to the working directory. Defaults to '.' (the working directory)
        type: string
        default: "."
      workspace-path:
        description: >
          Path of the workspace to persist to relative to workspace-root.
          Typically this is the same as the destination-orb-path. If the default
          value of blank is provided then this job will not persist to a
          workspace.
        type: string
        default: ""
      artifact-path:
        description: >
          Path to directory that should be saved as a job artifact. If the
          default value of blank is provided then this job will not save any
          artifacts.
        type: string
        default: ""
    executor: cli/default
    steps:
      # Setup
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: << parameters.workspace-root >>
      # Pack
      - pack:
          source: << parameters.source-dir >>
          destination: << parameters.destination-orb-path >>
      # Validate
      - when:
          condition: << parameters.validate >>
          steps:
            - validate:
                orb-path: << parameters.destination-orb-path >>
      # Save
      - when:
          condition: << parameters.workspace-path >>
          steps:
            - persist_to_workspace:
                root: << parameters.workspace-root >>
                paths:
                  - << parameters.workspace-path >>
      - when:
          condition: << parameters.artifact-path >>
          steps:
            - store_artifacts:
                path: << parameters.artifact-path >>


  increment:
    description: >
      Uses the CLI to increment the version of an orb in the registry.
      If the orb does not have a version yet it starts at 0.0.0
    executor: cli/default
    parameters:
      orb-path:
        description: Path to an orb file.
        type: string
      orb-ref:
        description: A versionless orb-ref in the form <namespace>/<orb-name>
        type: string
      segment:
        description: >
          The semver segment to increment 'major' or 'minor' or 'patch'
        type: enum
        enum: ["major", "minor", "patch"]
      publish-token-variable:
        description: >
          The env var containing your token. Pass this as a literal string such
          as `$ORB_PUBLISHING_TOKEN`. Do not paste the actual token into your
          configuration. If omitted it's assumed the CLI has already been setup
          with a valid token.
        type: string
        default: ""
      validate:
        description: >
          Boolean for whether or not to do validation on the orb. Default
          is true.
        type: boolean
        default: true
      checkout:
        description: >
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
        default: true
      attach-workspace:
        description: >
          Boolean for whether or not to attach to an existing workspace. Default
          is false.
        type: boolean
        default: false
      workspace-root:
        description: >
          Workspace root path that is either an absolute path or a path relative
          to the working directory. Defaults to '.' (the working directory)
        type: string
        default: "."
    steps:
      # Setup
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: << parameters.workspace-root >>
      # Validate
      - when:
          condition: << parameters.validate >>
          steps:
            - validate:
                orb-path: << parameters.orb-path >>
      # Increment
      - increment:
          orb-path: << parameters.orb-path >>
          orb-ref: << parameters.orb-ref >>
          segment: << parameters.segment >>
          token-variable: << parameters.publish-token-variable >>

  publish:
    executor: cli/default
    parameters:
      orb-path:
        description: Path of the orb file to publish.
        type: string
      orb-ref:
        description: A full orb-ref in the form of <namespace>/<orbname>@<semver>
        type: string
      publish-token-variable:
        description: >
          The env var containing your publish token. Pass this as a literal string such
          as `$ORB_PUBLISHING_TOKEN`. DO NOT paste the actual token into your
          configuration. If omitted it's assumed the CLI has already been setup
          with a valid token.
        type: string
        default: ""
      validate:
        description: >
          Boolean for whether or not to do validation on the orb. Default
          is true.
        type: boolean
        default: true
      checkout:
        description: >
          Boolean for whether or not to checkout as a first step. Default is true.
        type: boolean
        default: true
      attach-workspace:
        description: >
          Boolean for whether or not to attach to an existing workspace. Default
          is false.
        type: boolean
        default: false
      workspace-root:
        description: >
          Workspace root path that is either an absolute path or a path relative
          to the working directory. Defaults to '.' (the working directory)
        type: string
        default: "."
    steps:
      # Setup
      - when:
          condition: << parameters.checkout >>
          steps:
            - checkout
      - when:
          condition: << parameters.attach-workspace >>
          steps:
            - attach_workspace:
                at: << parameters.workspace-root >>
      # Validate
      - when:
          condition: << parameters.validate >>
          steps:
            - validate:
                orb-path: << parameters.orb-path >>
      # Publish
      - publish:
          orb-path: << parameters.orb-path >>
          orb-ref: << parameters.orb-ref >>
          token-variable: << parameters.publish-token-variable >>
